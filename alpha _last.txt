------------------------------------------1.Calculate the average, variance and standard deviation in Python using NumPy

import numpy as np
import pandas as pd
df = pd.DataFrame({'numbers':[2,4,5,56,6,7,7,7,10,34,4,34,3,2,1,1,1,34,5,5,6,6,3]})
average = np.mean(df['numbers'])
variance = np.var(df['numbers'])
std_deviation = np.std(df['numbers'])
print("Average:",average,"\n" "Variance:",variance, "\n"  "std_deviation:", std_deviation)

------------------------2.How to calculate probability in a normal distribution given mean and standard deviation in Python?

from scipy.stats import norm
import numpy as np
data_start = -5
data_end = 5
data_points = 11
data = np.linspace(data_start, data_end, data_points) 
mean = np.mean(data)
std = np.std(data)
probability_pdf = norm.pdf(3, loc=mean, scale=std)
print(probability_pdf)

------------------------3.How to Make a Time Series Plot with Rolling Average in Python?

# import the libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# import the dataset
data = pd.read_csv( 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-total-female-births.csv')

#view the dataset
display( data.head())

# computing a 7 day rolling average
data[ '7day_rolling_avg' ] = data.Births.rolling( 7).mean()

# viewing the dataset
display(data.head(10))

# set figure size
plt.figure( figsize = ( 12, 5))

# plot a simple time series plot
# using seaborn.lineplot()
sns.lineplot( x = 'Date',
			y = 'Births',
			data = data,
			label = 'DailyBirths')

# plot using rolling average
sns.lineplot( x = 'Date',
			y = '7day_rolling_avg',
			data = data,
			label = 'Rollingavg')

plt.xlabel('Months of the year 1959')

# setting customized ticklabels for x axis
pos = [ '1959-01-01', '1959-02-01', '1959-03-01', '1959-04-01',
	'1959-05-01', '1959-06-01', '1959-07-01', '1959-08-01',
	'1959-09-01', '1959-10-01', '1959-11-01', '1959-12-01']

lab = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'June',
	'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']

plt.xticks( pos, lab)

plt.ylabel('Female Births')


-----------------------------4.Any 4 plotting methods using pandas and matplotlib

import pandas as pd
import matplotlib.pyplot as plt

# Create a sample dataframe
data = {'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016],
        'sales': [100, 200, 300, 400, 500, 600, 700]}
df = pd.DataFrame(data)

# Plot the data
plt.plot(df['year'], df['sales'])

# Set the plot title and labels
plt.title('Sales over years')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.show()



# Create a sample dataframe
data = {'x': [1, 2, 3, 4, 5, 6, 7, 8, 9],
        'y': [3, 5, 4, 7, 6, 8, 9, 11, 10]}
df = pd.DataFrame(data)

# Plot the data
plt.scatter(df['x'], df['y'])

# Set the plot title and labels
plt.title('Scatter plot')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()



# Create a sample dataframe
data = {'age': [18, 20, 21, 22, 23, 25, 26, 28, 29, 30, 30, 32, 33, 34, 35]}
df = pd.DataFrame(data)

# Plot the data
plt.hist(df['age'], bins=5)

# Set the plot title and labels
plt.title('Age distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()



# Create a sample dataframe
data = {'group': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C'],
        'value': [10, 20, 30, 5, 15, 25, 1, 6, 11]}
df = pd.DataFrame(data)

# Plot the data
plt.boxplot([df[df['group'] == 'A']['value'], df[df['group'] == 'B']['value'], df[df['group'] == 'C']['value']])

# Set the plot title and labels
plt.title('Box plot')
plt.xlabel('Group')
plt.ylabel('Value')
plt.xticks([1, 2, 3], ['A', 'B', 'C'])
plt.show()

----------------------------5.linear regression on the data set mydata.csv.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

df = pd.read_csv("C:/Users/Avishkar/Downloads/mydata (1).csv")
df
#

%matplotlib inline
plt.xlabel("x")
plt.ylabel("y")
plt.scatter(df.x,df.y,color="red",marker="+")
#

reg=LinearRegression()
reg.fit(df[["x"]],df.y)
#

reg.coef_
#

reg.intercept_
#

%matplotlib inline
plt.xlabel("x",fontsize=20)
plt.ylabel("y",fontsize=20)
plt.scatter(df.x,df.y,color="red",marker="+")
plt.plot(df.x,reg.predict(df[["x"]]),color="blue")

-----------------------------6.multiple linear regression-----------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing

# importing data
df = pd.read_csv("C:/Users/Avishkar/Downloads/Real-estate (1).csv")
df.drop('No', inplace = True,axis=1)

print(df.head())

######
print(df.columns)

######
# plotting a scatterplot
sns.scatterplot(x='X4 number of convenience stores',
				y='Y house price of unit area', data=df)

#######
# creating feature variables
X = df.drop('Y house price of unit area',axis= 1)
y = df['Y house price of unit area']
print(X)
print(y)

#######
# creating train and test sets
X_train, X_test, y_train, y_test = train_test_split(
	X, y, test_size=0.3, random_state=101)

# creating a regression model
model = LinearRegression()

# fitting the model
model.fit(X_train,y_train)

# making predictions
predictions = model.predict(X_test)

# model evaluation
print(
'mean_squared_error : ', mean_squared_error(y_test, predictions))
print(
'mean_absolute_error : ', mean_absolute_error(y_test, predictions))

-----------------------------------import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing

# importing data
df = pd.read_csv("C:/Users/Avishkar/Downloads/Real-estate (1).csv")
df.drop('No', inplace = True,axis=1)

print(df.head())

######
print(df.columns)

######
# plotting a scatterplot
sns.scatterplot(x='X4 number of convenience stores',
				y='Y house price of unit area', data=df)

#######
# creating feature variables
X = df.drop('Y house price of unit area',axis= 1)
y = df['Y house price of unit area']
print(X)
print(y)

#######
# creating train and test sets
X_train, X_test, y_train, y_test = train_test_split(
	X, y, test_size=0.3, random_state=101)

# creating a regression model
model = LinearRegression()

# fitting the model
model.fit(X_train,y_train)

# making predictions
predictions = model.predict(X_test)

# model evaluation
print(
'mean_squared_error : ', mean_squared_error(y_test, predictions))
print(
'mean_absolute_error : ', mean_absolute_error(y_test, predictions))

----------------------import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn import preprocessing

# importing data
df = pd.read_csv("C:/Users/Avishkar/Downloads/Real-estate (1).csv")
df.drop('No', inplace = True,axis=1)

print(df.head())

######
print(df.columns)

######
# plotting a scatterplot
sns.scatterplot(x='X4 number of convenience stores',
				y='Y house price of unit area', data=df)

#######
# creating feature variables
X = df.drop('Y house price of unit area',axis= 1)
y = df['Y house price of unit area']
print(X)
print(y)

#######
# creating train and test sets
X_train, X_test, y_train, y_test = train_test_split(
	X, y, test_size=0.3, random_state=101)

# creating a regression model
model = LinearRegression()

# fitting the model
model.fit(X_train,y_train)

# making predictions
predictions = model.predict(X_test)

# model evaluation
print(
'mean_squared_error : ', mean_squared_error(y_test, predictions))
print(
'mean_absolute_error : ', mean_absolute_error(y_test, predictions))


----------------------------------7.Perform ARIMA model and predict the future values on temp.csv

import pandas as pd
import numpy as np

df=pd.read_csv(r'C:\Users\Avishkar\Downloads\temp.csv',index_col="DATE",parse_dates=True)
df=df.dropna()
print("shape of data",df.shape)
df.head()
#########################################
df['AvgTemp'].plot(figsize=(12,5))
#################################
from statsmodels.tsa.stattools import adfuller

def adf_test(dataset):
	dftest = adfuller(dataset,autolag = 'AIC')
	print("1. ADF : ",dftest[0])
	print("2. P-value : ",dftest[1])
	print("3. Num of Lage : ",dftest[2])
	print("4. Num of Observations used for ADF regression an critical values cal : ",dftest[3])
	print("5. Critical Values : ")
	for key, val in dftest[4].items():
		print("\t",key,":",val)

adf_test(df['AvgTemp'])		
###############################
from pmdarima import auto_arima 
# Ignore harmless warnings 
import warnings 
warnings.filterwarnings("ignore")
stepwise_fit = auto_arima (df['AvgTemp'], 
                           suppress_warnings=True)
stepwise_fit.summary()
##########################
print(df.shape)
train=df.iloc[:-30]
test=df.iloc[-30:]
print(train.shape,test.shape)
print(test.iloc[0],test.iloc[-1])
###############################
from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(train['AvgTemp'], order=(1, 0, 5))
results = model.fit()
print(results.summary())
####################################
# make predictions
start = len(train)
end = len(train) + len(test) - 1
pred = results.predict(start=start, end=end, typ='levels').rename('ARIMA predictions')

# plot the predictions and actual values
pred.plot(legend=True)
test['AvgTemp'].plot(legend=True)
###############################
pred.plot(legend='ARIMA Predictions')
test['AvgTemp'].plot(legend=True)
##############################
from sklearn.metrics import mean_squared_error 
from math import sqrt 
rmse=sqrt(mean_squared_error(pred, test['AvgTemp'])) 
print(rmse)
###############################
from statsmodels.tsa.arima.model import ARIMA

model2 = ARIMA(df['AvgTemp'], order=(1, 0, 5))
model2 = model2.fit()
df.tail()

############################
index_future_dates = pd.date_range(start='2018-12-30', end='2019-01-29')
# print(index_future_dates)

pred = model2.predict(start=len(df), end=len(df)+30, typ='levels').rename('ARIMA Predictions')
# print(comp_pred)

pred.index = index_future_dates
print(pred)
#################################
pred.plot(figsize=(12,5),legend=True)


------------------------------------------8.ggeplot

